//! This file is generated code. Please edit the generator
//! in dev-tools/gen-target-info if you need to make changes.

use super::Target;

pub(crate) fn get(target_triple: &str) -> Option<Target> {
    Some(match target_triple {
        "aarch64-apple-darwin" => Target {
            full_arch: "aarch64".into(),
            arch: "aarch64".into(),
            vendor: "apple".into(),
            os: "macos".into(),
            env: "".into(),
            abi: "".into(),
        },
        "aarch64-apple-ios" => Target {
            full_arch: "aarch64".into(),
            arch: "aarch64".into(),
            vendor: "apple".into(),
            os: "ios".into(),
            env: "".into(),
            abi: "".into(),
        },
        "aarch64-apple-ios-macabi" => Target {
            full_arch: "aarch64".into(),
            arch: "aarch64".into(),
            vendor: "apple".into(),
            os: "ios".into(),
            env: "".into(),
            abi: "macabi".into(),
        },
        "aarch64-apple-ios-sim" => Target {
            full_arch: "aarch64".into(),
            arch: "aarch64".into(),
            vendor: "apple".into(),
            os: "ios".into(),
            env: "".into(),
            abi: "sim".into(),
        },
        "aarch64-apple-tvos" => Target {
            full_arch: "aarch64".into(),
            arch: "aarch64".into(),
            vendor: "apple".into(),
            os: "tvos".into(),
            env: "".into(),
            abi: "".into(),
        },
        "aarch64-apple-tvos-sim" => Target {
            full_arch: "aarch64".into(),
            arch: "aarch64".into(),
            vendor: "apple".into(),
            os: "tvos".into(),
            env: "".into(),
            abi: "sim".into(),
        },
        "aarch64-apple-visionos" => Target {
            full_arch: "aarch64".into(),
            arch: "aarch64".into(),
            vendor: "apple".into(),
            os: "visionos".into(),
            env: "".into(),
            abi: "".into(),
        },
        "aarch64-apple-visionos-sim" => Target {
            full_arch: "aarch64".into(),
            arch: "aarch64".into(),
            vendor: "apple".into(),
            os: "visionos".into(),
            env: "".into(),
            abi: "sim".into(),
        },
        "aarch64-apple-watchos" => Target {
            full_arch: "aarch64".into(),
            arch: "aarch64".into(),
            vendor: "apple".into(),
            os: "watchos".into(),
            env: "".into(),
            abi: "".into(),
        },
        "aarch64-apple-watchos-sim" => Target {
            full_arch: "aarch64".into(),
            arch: "aarch64".into(),
            vendor: "apple".into(),
            os: "watchos".into(),
            env: "".into(),
            abi: "sim".into(),
        },
        "aarch64-fuchsia" => Target {
            full_arch: "aarch64".into(),
            arch: "aarch64".into(),
            vendor: "unknown".into(),
            os: "fuchsia".into(),
            env: "".into(),
            abi: "".into(),
        },
        "aarch64-kmc-solid_asp3" => Target {
            full_arch: "aarch64".into(),
            arch: "aarch64".into(),
            vendor: "kmc".into(),
            os: "solid_asp3".into(),
            env: "".into(),
            abi: "".into(),
        },
        "aarch64-linux-android" => Target {
            full_arch: "aarch64".into(),
            arch: "aarch64".into(),
            vendor: "unknown".into(),
            os: "android".into(),
            env: "".into(),
            abi: "".into(),
        },
        "aarch64-nintendo-switch-freestanding" => Target {
            full_arch: "aarch64".into(),
            arch: "aarch64".into(),
            vendor: "nintendo".into(),
            os: "horizon".into(),
            env: "".into(),
            abi: "".into(),
        },
        "aarch64-pc-windows-gnullvm" => Target {
            full_arch: "aarch64".into(),
            arch: "aarch64".into(),
            vendor: "pc".into(),
            os: "windows".into(),
            env: "gnu".into(),
            abi: "llvm".into(),
        },
        "aarch64-pc-windows-msvc" => Target {
            full_arch: "aarch64".into(),
            arch: "aarch64".into(),
            vendor: "pc".into(),
            os: "windows".into(),
            env: "msvc".into(),
            abi: "".into(),
        },
        "aarch64-unknown-freebsd" => Target {
            full_arch: "aarch64".into(),
            arch: "aarch64".into(),
            vendor: "unknown".into(),
            os: "freebsd".into(),
            env: "".into(),
            abi: "".into(),
        },
        "aarch64-unknown-fuchsia" => Target {
            full_arch: "aarch64".into(),
            arch: "aarch64".into(),
            vendor: "unknown".into(),
            os: "fuchsia".into(),
            env: "".into(),
            abi: "".into(),
        },
        "aarch64-unknown-hermit" => Target {
            full_arch: "aarch64".into(),
            arch: "aarch64".into(),
            vendor: "unknown".into(),
            os: "hermit".into(),
            env: "".into(),
            abi: "".into(),
        },
        "aarch64-unknown-illumos" => Target {
            full_arch: "aarch64".into(),
            arch: "aarch64".into(),
            vendor: "unknown".into(),
            os: "illumos".into(),
            env: "".into(),
            abi: "".into(),
        },
        "aarch64-unknown-linux-gnu" => Target {
            full_arch: "aarch64".into(),
            arch: "aarch64".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "gnu".into(),
            abi: "".into(),
        },
        "aarch64-unknown-linux-gnu_ilp32" => Target {
            full_arch: "aarch64".into(),
            arch: "aarch64".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "gnu".into(),
            abi: "ilp32".into(),
        },
        "aarch64-unknown-linux-musl" => Target {
            full_arch: "aarch64".into(),
            arch: "aarch64".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "musl".into(),
            abi: "".into(),
        },
        "aarch64-unknown-linux-ohos" => Target {
            full_arch: "aarch64".into(),
            arch: "aarch64".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "ohos".into(),
            abi: "".into(),
        },
        "aarch64-unknown-netbsd" => Target {
            full_arch: "aarch64".into(),
            arch: "aarch64".into(),
            vendor: "unknown".into(),
            os: "netbsd".into(),
            env: "".into(),
            abi: "".into(),
        },
        "aarch64-unknown-none" => Target {
            full_arch: "aarch64".into(),
            arch: "aarch64".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "".into(),
            abi: "".into(),
        },
        "aarch64-unknown-none-softfloat" => Target {
            full_arch: "aarch64".into(),
            arch: "aarch64".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "".into(),
            abi: "softfloat".into(),
        },
        "aarch64-unknown-nto-qnx700" => Target {
            full_arch: "aarch64".into(),
            arch: "aarch64".into(),
            vendor: "unknown".into(),
            os: "nto".into(),
            env: "nto70".into(),
            abi: "".into(),
        },
        "aarch64-unknown-nto-qnx710" => Target {
            full_arch: "aarch64".into(),
            arch: "aarch64".into(),
            vendor: "unknown".into(),
            os: "nto".into(),
            env: "nto71".into(),
            abi: "".into(),
        },
        "aarch64-unknown-openbsd" => Target {
            full_arch: "aarch64".into(),
            arch: "aarch64".into(),
            vendor: "unknown".into(),
            os: "openbsd".into(),
            env: "".into(),
            abi: "".into(),
        },
        "aarch64-unknown-redox" => Target {
            full_arch: "aarch64".into(),
            arch: "aarch64".into(),
            vendor: "unknown".into(),
            os: "redox".into(),
            env: "relibc".into(),
            abi: "".into(),
        },
        "aarch64-unknown-teeos" => Target {
            full_arch: "aarch64".into(),
            arch: "aarch64".into(),
            vendor: "unknown".into(),
            os: "teeos".into(),
            env: "".into(),
            abi: "".into(),
        },
        "aarch64-unknown-trusty" => Target {
            full_arch: "aarch64".into(),
            arch: "aarch64".into(),
            vendor: "unknown".into(),
            os: "trusty".into(),
            env: "".into(),
            abi: "".into(),
        },
        "aarch64-unknown-uefi" => Target {
            full_arch: "aarch64".into(),
            arch: "aarch64".into(),
            vendor: "unknown".into(),
            os: "uefi".into(),
            env: "".into(),
            abi: "".into(),
        },
        "aarch64-uwp-windows-msvc" => Target {
            full_arch: "aarch64".into(),
            arch: "aarch64".into(),
            vendor: "uwp".into(),
            os: "windows".into(),
            env: "msvc".into(),
            abi: "uwp".into(),
        },
        "aarch64-wrs-vxworks" => Target {
            full_arch: "aarch64".into(),
            arch: "aarch64".into(),
            vendor: "wrs".into(),
            os: "vxworks".into(),
            env: "gnu".into(),
            abi: "".into(),
        },
        "aarch64_be-unknown-linux-gnu" => Target {
            full_arch: "aarch64_be".into(),
            arch: "aarch64".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "gnu".into(),
            abi: "".into(),
        },
        "aarch64_be-unknown-linux-gnu_ilp32" => Target {
            full_arch: "aarch64_be".into(),
            arch: "aarch64".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "gnu".into(),
            abi: "ilp32".into(),
        },
        "aarch64_be-unknown-netbsd" => Target {
            full_arch: "aarch64_be".into(),
            arch: "aarch64".into(),
            vendor: "unknown".into(),
            os: "netbsd".into(),
            env: "".into(),
            abi: "".into(),
        },
        "arm-linux-androideabi" => Target {
            full_arch: "arm".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "android".into(),
            env: "".into(),
            abi: "eabi".into(),
        },
        "arm-unknown-linux-gnueabi" => Target {
            full_arch: "arm".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "gnu".into(),
            abi: "eabi".into(),
        },
        "arm-unknown-linux-gnueabihf" => Target {
            full_arch: "arm".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "gnu".into(),
            abi: "eabihf".into(),
        },
        "arm-unknown-linux-musleabi" => Target {
            full_arch: "arm".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "musl".into(),
            abi: "eabi".into(),
        },
        "arm-unknown-linux-musleabihf" => Target {
            full_arch: "arm".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "musl".into(),
            abi: "eabihf".into(),
        },
        "arm64_32-apple-watchos" => Target {
            full_arch: "arm64_32".into(),
            arch: "aarch64".into(),
            vendor: "apple".into(),
            os: "watchos".into(),
            env: "".into(),
            abi: "".into(),
        },
        "arm64e-apple-darwin" => Target {
            full_arch: "arm64e".into(),
            arch: "aarch64".into(),
            vendor: "apple".into(),
            os: "macos".into(),
            env: "".into(),
            abi: "".into(),
        },
        "arm64e-apple-ios" => Target {
            full_arch: "arm64e".into(),
            arch: "aarch64".into(),
            vendor: "apple".into(),
            os: "ios".into(),
            env: "".into(),
            abi: "".into(),
        },
        "arm64e-apple-tvos" => Target {
            full_arch: "arm64e".into(),
            arch: "aarch64".into(),
            vendor: "apple".into(),
            os: "tvos".into(),
            env: "".into(),
            abi: "".into(),
        },
        "arm64ec-pc-windows-msvc" => Target {
            full_arch: "arm64ec".into(),
            arch: "arm64ec".into(),
            vendor: "pc".into(),
            os: "windows".into(),
            env: "msvc".into(),
            abi: "".into(),
        },
        "armeb-unknown-linux-gnueabi" => Target {
            full_arch: "armeb".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "gnu".into(),
            abi: "eabi".into(),
        },
        "armebv7r-none-eabi" => Target {
            full_arch: "armebv7r".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "".into(),
            abi: "eabi".into(),
        },
        "armebv7r-none-eabihf" => Target {
            full_arch: "armebv7r".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "".into(),
            abi: "eabihf".into(),
        },
        "armv4t-none-eabi" => Target {
            full_arch: "armv4t".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "".into(),
            abi: "eabi".into(),
        },
        "armv4t-unknown-linux-gnueabi" => Target {
            full_arch: "armv4t".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "gnu".into(),
            abi: "eabi".into(),
        },
        "armv5te-none-eabi" => Target {
            full_arch: "armv5te".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "".into(),
            abi: "eabi".into(),
        },
        "armv5te-unknown-linux-gnueabi" => Target {
            full_arch: "armv5te".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "gnu".into(),
            abi: "eabi".into(),
        },
        "armv5te-unknown-linux-musleabi" => Target {
            full_arch: "armv5te".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "musl".into(),
            abi: "eabi".into(),
        },
        "armv5te-unknown-linux-uclibceabi" => Target {
            full_arch: "armv5te".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "uclibc".into(),
            abi: "eabi".into(),
        },
        "armv6-unknown-freebsd" => Target {
            full_arch: "armv6".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "freebsd".into(),
            env: "gnu".into(),
            abi: "eabihf".into(),
        },
        "armv6-unknown-netbsd-eabihf" => Target {
            full_arch: "armv6".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "netbsd".into(),
            env: "".into(),
            abi: "eabihf".into(),
        },
        "armv6k-nintendo-3ds" => Target {
            full_arch: "armv6k".into(),
            arch: "arm".into(),
            vendor: "nintendo".into(),
            os: "horizon".into(),
            env: "newlib".into(),
            abi: "eabihf".into(),
        },
        "armv7-apple-ios" => Target {
            full_arch: "armv7".into(),
            arch: "arm".into(),
            vendor: "apple".into(),
            os: "ios".into(),
            env: "".into(),
            abi: "".into(),
        },
        "armv7-linux-androideabi" => Target {
            full_arch: "armv7".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "android".into(),
            env: "".into(),
            abi: "eabi".into(),
        },
        "armv7-rtems-eabihf" => Target {
            full_arch: "armv7".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "rtems".into(),
            env: "newlib".into(),
            abi: "eabihf".into(),
        },
        "armv7-sony-vita-newlibeabihf" => Target {
            full_arch: "armv7".into(),
            arch: "arm".into(),
            vendor: "sony".into(),
            os: "vita".into(),
            env: "newlib".into(),
            abi: "eabihf".into(),
        },
        "armv7-unknown-freebsd" => Target {
            full_arch: "armv7".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "freebsd".into(),
            env: "gnu".into(),
            abi: "eabihf".into(),
        },
        "armv7-unknown-linux-gnueabi" => Target {
            full_arch: "armv7".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "gnu".into(),
            abi: "eabi".into(),
        },
        "armv7-unknown-linux-gnueabihf" => Target {
            full_arch: "armv7".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "gnu".into(),
            abi: "eabihf".into(),
        },
        "armv7-unknown-linux-musleabi" => Target {
            full_arch: "armv7".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "musl".into(),
            abi: "eabi".into(),
        },
        "armv7-unknown-linux-musleabihf" => Target {
            full_arch: "armv7".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "musl".into(),
            abi: "eabihf".into(),
        },
        "armv7-unknown-linux-ohos" => Target {
            full_arch: "armv7".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "ohos".into(),
            abi: "eabi".into(),
        },
        "armv7-unknown-linux-uclibceabi" => Target {
            full_arch: "armv7".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "uclibc".into(),
            abi: "eabi".into(),
        },
        "armv7-unknown-linux-uclibceabihf" => Target {
            full_arch: "armv7".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "uclibc".into(),
            abi: "eabihf".into(),
        },
        "armv7-unknown-netbsd-eabihf" => Target {
            full_arch: "armv7".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "netbsd".into(),
            env: "".into(),
            abi: "eabihf".into(),
        },
        "armv7-unknown-trusty" => Target {
            full_arch: "armv7".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "trusty".into(),
            env: "".into(),
            abi: "eabi".into(),
        },
        "armv7-wrs-vxworks-eabihf" => Target {
            full_arch: "armv7".into(),
            arch: "arm".into(),
            vendor: "wrs".into(),
            os: "vxworks".into(),
            env: "gnu".into(),
            abi: "eabihf".into(),
        },
        "armv7a-kmc-solid_asp3-eabi" => Target {
            full_arch: "armv7a".into(),
            arch: "arm".into(),
            vendor: "kmc".into(),
            os: "solid_asp3".into(),
            env: "".into(),
            abi: "eabi".into(),
        },
        "armv7a-kmc-solid_asp3-eabihf" => Target {
            full_arch: "armv7a".into(),
            arch: "arm".into(),
            vendor: "kmc".into(),
            os: "solid_asp3".into(),
            env: "".into(),
            abi: "eabihf".into(),
        },
        "armv7a-none-eabi" => Target {
            full_arch: "armv7a".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "".into(),
            abi: "eabi".into(),
        },
        "armv7a-none-eabihf" => Target {
            full_arch: "armv7a".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "".into(),
            abi: "eabihf".into(),
        },
        "armv7k-apple-watchos" => Target {
            full_arch: "armv7k".into(),
            arch: "arm".into(),
            vendor: "apple".into(),
            os: "watchos".into(),
            env: "".into(),
            abi: "".into(),
        },
        "armv7r-none-eabi" => Target {
            full_arch: "armv7r".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "".into(),
            abi: "eabi".into(),
        },
        "armv7r-none-eabihf" => Target {
            full_arch: "armv7r".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "".into(),
            abi: "eabihf".into(),
        },
        "armv7s-apple-ios" => Target {
            full_arch: "armv7s".into(),
            arch: "arm".into(),
            vendor: "apple".into(),
            os: "ios".into(),
            env: "".into(),
            abi: "".into(),
        },
        "armv8r-none-eabihf" => Target {
            full_arch: "armv8r".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "".into(),
            abi: "eabihf".into(),
        },
        "asmjs-unknown-emscripten" => Target {
            full_arch: "asmjs".into(),
            arch: "wasm32".into(),
            vendor: "unknown".into(),
            os: "emscripten".into(),
            env: "".into(),
            abi: "".into(),
        },
        "avr-unknown-gnu-atmega328" => Target {
            full_arch: "avr".into(),
            arch: "avr".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "gnu".into(),
            abi: "".into(),
        },
        "bpfeb-unknown-none" => Target {
            full_arch: "bpfeb".into(),
            arch: "bpf".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "".into(),
            abi: "".into(),
        },
        "bpfel-unknown-none" => Target {
            full_arch: "bpfel".into(),
            arch: "bpf".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "".into(),
            abi: "".into(),
        },
        "csky-unknown-linux-gnuabiv2" => Target {
            full_arch: "csky".into(),
            arch: "csky".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "gnu".into(),
            abi: "abiv2".into(),
        },
        "csky-unknown-linux-gnuabiv2hf" => Target {
            full_arch: "csky".into(),
            arch: "csky".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "gnu".into(),
            abi: "abiv2hf".into(),
        },
        "hexagon-unknown-linux-musl" => Target {
            full_arch: "hexagon".into(),
            arch: "hexagon".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "musl".into(),
            abi: "".into(),
        },
        "hexagon-unknown-none-elf" => Target {
            full_arch: "hexagon".into(),
            arch: "hexagon".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "".into(),
            abi: "".into(),
        },
        "i386-apple-ios" => Target {
            full_arch: "i386".into(),
            arch: "x86".into(),
            vendor: "apple".into(),
            os: "ios".into(),
            env: "".into(),
            abi: "sim".into(),
        },
        "i586-pc-nto-qnx700" => Target {
            full_arch: "i586".into(),
            arch: "x86".into(),
            vendor: "pc".into(),
            os: "nto".into(),
            env: "nto70".into(),
            abi: "".into(),
        },
        "i586-pc-windows-msvc" => Target {
            full_arch: "i586".into(),
            arch: "x86".into(),
            vendor: "pc".into(),
            os: "windows".into(),
            env: "msvc".into(),
            abi: "".into(),
        },
        "i586-unknown-linux-gnu" => Target {
            full_arch: "i586".into(),
            arch: "x86".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "gnu".into(),
            abi: "".into(),
        },
        "i586-unknown-linux-musl" => Target {
            full_arch: "i586".into(),
            arch: "x86".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "musl".into(),
            abi: "".into(),
        },
        "i586-unknown-netbsd" => Target {
            full_arch: "i586".into(),
            arch: "x86".into(),
            vendor: "unknown".into(),
            os: "netbsd".into(),
            env: "".into(),
            abi: "".into(),
        },
        "i686-apple-darwin" => Target {
            full_arch: "i686".into(),
            arch: "x86".into(),
            vendor: "apple".into(),
            os: "macos".into(),
            env: "".into(),
            abi: "".into(),
        },
        "i686-linux-android" => Target {
            full_arch: "i686".into(),
            arch: "x86".into(),
            vendor: "unknown".into(),
            os: "android".into(),
            env: "".into(),
            abi: "".into(),
        },
        "i686-pc-windows-gnu" => Target {
            full_arch: "i686".into(),
            arch: "x86".into(),
            vendor: "pc".into(),
            os: "windows".into(),
            env: "gnu".into(),
            abi: "".into(),
        },
        "i686-pc-windows-gnullvm" => Target {
            full_arch: "i686".into(),
            arch: "x86".into(),
            vendor: "pc".into(),
            os: "windows".into(),
            env: "gnu".into(),
            abi: "llvm".into(),
        },
        "i686-pc-windows-msvc" => Target {
            full_arch: "i686".into(),
            arch: "x86".into(),
            vendor: "pc".into(),
            os: "windows".into(),
            env: "msvc".into(),
            abi: "".into(),
        },
        "i686-unknown-freebsd" => Target {
            full_arch: "i686".into(),
            arch: "x86".into(),
            vendor: "unknown".into(),
            os: "freebsd".into(),
            env: "".into(),
            abi: "".into(),
        },
        "i686-unknown-haiku" => Target {
            full_arch: "i686".into(),
            arch: "x86".into(),
            vendor: "unknown".into(),
            os: "haiku".into(),
            env: "".into(),
            abi: "".into(),
        },
        "i686-unknown-hurd-gnu" => Target {
            full_arch: "i686".into(),
            arch: "x86".into(),
            vendor: "unknown".into(),
            os: "hurd".into(),
            env: "gnu".into(),
            abi: "".into(),
        },
        "i686-unknown-linux-gnu" => Target {
            full_arch: "i686".into(),
            arch: "x86".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "gnu".into(),
            abi: "".into(),
        },
        "i686-unknown-linux-musl" => Target {
            full_arch: "i686".into(),
            arch: "x86".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "musl".into(),
            abi: "".into(),
        },
        "i686-unknown-netbsd" => Target {
            full_arch: "i686".into(),
            arch: "x86".into(),
            vendor: "unknown".into(),
            os: "netbsd".into(),
            env: "".into(),
            abi: "".into(),
        },
        "i686-unknown-openbsd" => Target {
            full_arch: "i686".into(),
            arch: "x86".into(),
            vendor: "unknown".into(),
            os: "openbsd".into(),
            env: "".into(),
            abi: "".into(),
        },
        "i686-unknown-redox" => Target {
            full_arch: "i686".into(),
            arch: "x86".into(),
            vendor: "unknown".into(),
            os: "redox".into(),
            env: "relibc".into(),
            abi: "".into(),
        },
        "i686-unknown-uefi" => Target {
            full_arch: "i686".into(),
            arch: "x86".into(),
            vendor: "unknown".into(),
            os: "uefi".into(),
            env: "".into(),
            abi: "".into(),
        },
        "i686-uwp-windows-gnu" => Target {
            full_arch: "i686".into(),
            arch: "x86".into(),
            vendor: "uwp".into(),
            os: "windows".into(),
            env: "gnu".into(),
            abi: "uwp".into(),
        },
        "i686-uwp-windows-msvc" => Target {
            full_arch: "i686".into(),
            arch: "x86".into(),
            vendor: "uwp".into(),
            os: "windows".into(),
            env: "msvc".into(),
            abi: "uwp".into(),
        },
        "i686-win7-windows-msvc" => Target {
            full_arch: "i686".into(),
            arch: "x86".into(),
            vendor: "win7".into(),
            os: "windows".into(),
            env: "msvc".into(),
            abi: "".into(),
        },
        "i686-wrs-vxworks" => Target {
            full_arch: "i686".into(),
            arch: "x86".into(),
            vendor: "wrs".into(),
            os: "vxworks".into(),
            env: "gnu".into(),
            abi: "".into(),
        },
        "loongarch64-unknown-linux-gnu" => Target {
            full_arch: "loongarch64".into(),
            arch: "loongarch64".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "gnu".into(),
            abi: "".into(),
        },
        "loongarch64-unknown-linux-musl" => Target {
            full_arch: "loongarch64".into(),
            arch: "loongarch64".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "musl".into(),
            abi: "".into(),
        },
        "loongarch64-unknown-linux-ohos" => Target {
            full_arch: "loongarch64".into(),
            arch: "loongarch64".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "ohos".into(),
            abi: "".into(),
        },
        "loongarch64-unknown-none" => Target {
            full_arch: "loongarch64".into(),
            arch: "loongarch64".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "".into(),
            abi: "".into(),
        },
        "loongarch64-unknown-none-softfloat" => Target {
            full_arch: "loongarch64".into(),
            arch: "loongarch64".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "".into(),
            abi: "softfloat".into(),
        },
        "m68k-unknown-linux-gnu" => Target {
            full_arch: "m68k".into(),
            arch: "m68k".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "gnu".into(),
            abi: "".into(),
        },
        "mips-unknown-linux-gnu" => Target {
            full_arch: "mips".into(),
            arch: "mips".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "gnu".into(),
            abi: "".into(),
        },
        "mips-unknown-linux-musl" => Target {
            full_arch: "mips".into(),
            arch: "mips".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "musl".into(),
            abi: "".into(),
        },
        "mips-unknown-linux-uclibc" => Target {
            full_arch: "mips".into(),
            arch: "mips".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "uclibc".into(),
            abi: "".into(),
        },
        "mips64-openwrt-linux-musl" => Target {
            full_arch: "mips64".into(),
            arch: "mips64".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "musl".into(),
            abi: "abi64".into(),
        },
        "mips64-unknown-linux-gnuabi64" => Target {
            full_arch: "mips64".into(),
            arch: "mips64".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "gnu".into(),
            abi: "abi64".into(),
        },
        "mips64-unknown-linux-muslabi64" => Target {
            full_arch: "mips64".into(),
            arch: "mips64".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "musl".into(),
            abi: "abi64".into(),
        },
        "mips64el-unknown-linux-gnuabi64" => Target {
            full_arch: "mips64el".into(),
            arch: "mips64".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "gnu".into(),
            abi: "abi64".into(),
        },
        "mips64el-unknown-linux-muslabi64" => Target {
            full_arch: "mips64el".into(),
            arch: "mips64".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "musl".into(),
            abi: "abi64".into(),
        },
        "mipsel-sony-psp" => Target {
            full_arch: "mipsel".into(),
            arch: "mips".into(),
            vendor: "sony".into(),
            os: "psp".into(),
            env: "".into(),
            abi: "".into(),
        },
        "mipsel-sony-psx" => Target {
            full_arch: "mipsel".into(),
            arch: "mips".into(),
            vendor: "sony".into(),
            os: "none".into(),
            env: "psx".into(),
            abi: "".into(),
        },
        "mipsel-unknown-linux-gnu" => Target {
            full_arch: "mipsel".into(),
            arch: "mips".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "gnu".into(),
            abi: "".into(),
        },
        "mipsel-unknown-linux-musl" => Target {
            full_arch: "mipsel".into(),
            arch: "mips".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "musl".into(),
            abi: "".into(),
        },
        "mipsel-unknown-linux-uclibc" => Target {
            full_arch: "mipsel".into(),
            arch: "mips".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "uclibc".into(),
            abi: "".into(),
        },
        "mipsel-unknown-netbsd" => Target {
            full_arch: "mipsel".into(),
            arch: "mips".into(),
            vendor: "unknown".into(),
            os: "netbsd".into(),
            env: "".into(),
            abi: "".into(),
        },
        "mipsel-unknown-none" => Target {
            full_arch: "mipsel".into(),
            arch: "mips".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "".into(),
            abi: "".into(),
        },
        "mipsisa32r6-unknown-linux-gnu" => Target {
            full_arch: "mipsisa32r6".into(),
            arch: "mips32r6".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "gnu".into(),
            abi: "".into(),
        },
        "mipsisa32r6el-unknown-linux-gnu" => Target {
            full_arch: "mipsisa32r6el".into(),
            arch: "mips32r6".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "gnu".into(),
            abi: "".into(),
        },
        "mipsisa64r6-unknown-linux-gnuabi64" => Target {
            full_arch: "mipsisa64r6".into(),
            arch: "mips64r6".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "gnu".into(),
            abi: "abi64".into(),
        },
        "mipsisa64r6el-unknown-linux-gnuabi64" => Target {
            full_arch: "mipsisa64r6el".into(),
            arch: "mips64r6".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "gnu".into(),
            abi: "abi64".into(),
        },
        "msp430-none-elf" => Target {
            full_arch: "msp430".into(),
            arch: "msp430".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "".into(),
            abi: "".into(),
        },
        "nvptx64-nvidia-cuda" => Target {
            full_arch: "nvptx64".into(),
            arch: "nvptx64".into(),
            vendor: "nvidia".into(),
            os: "cuda".into(),
            env: "".into(),
            abi: "".into(),
        },
        "powerpc-unknown-freebsd" => Target {
            full_arch: "powerpc".into(),
            arch: "powerpc".into(),
            vendor: "unknown".into(),
            os: "freebsd".into(),
            env: "".into(),
            abi: "".into(),
        },
        "powerpc-unknown-linux-gnu" => Target {
            full_arch: "powerpc".into(),
            arch: "powerpc".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "gnu".into(),
            abi: "".into(),
        },
        "powerpc-unknown-linux-gnuspe" => Target {
            full_arch: "powerpc".into(),
            arch: "powerpc".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "gnu".into(),
            abi: "spe".into(),
        },
        "powerpc-unknown-linux-musl" => Target {
            full_arch: "powerpc".into(),
            arch: "powerpc".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "musl".into(),
            abi: "".into(),
        },
        "powerpc-unknown-linux-muslspe" => Target {
            full_arch: "powerpc".into(),
            arch: "powerpc".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "musl".into(),
            abi: "spe".into(),
        },
        "powerpc-unknown-netbsd" => Target {
            full_arch: "powerpc".into(),
            arch: "powerpc".into(),
            vendor: "unknown".into(),
            os: "netbsd".into(),
            env: "".into(),
            abi: "".into(),
        },
        "powerpc-unknown-openbsd" => Target {
            full_arch: "powerpc".into(),
            arch: "powerpc".into(),
            vendor: "unknown".into(),
            os: "openbsd".into(),
            env: "".into(),
            abi: "".into(),
        },
        "powerpc-wrs-vxworks" => Target {
            full_arch: "powerpc".into(),
            arch: "powerpc".into(),
            vendor: "wrs".into(),
            os: "vxworks".into(),
            env: "gnu".into(),
            abi: "".into(),
        },
        "powerpc-wrs-vxworks-spe" => Target {
            full_arch: "powerpc".into(),
            arch: "powerpc".into(),
            vendor: "wrs".into(),
            os: "vxworks".into(),
            env: "gnu".into(),
            abi: "spe".into(),
        },
        "powerpc64-ibm-aix" => Target {
            full_arch: "powerpc64".into(),
            arch: "powerpc64".into(),
            vendor: "ibm".into(),
            os: "aix".into(),
            env: "".into(),
            abi: "vec-extabi".into(),
        },
        "powerpc64-unknown-freebsd" => Target {
            full_arch: "powerpc64".into(),
            arch: "powerpc64".into(),
            vendor: "unknown".into(),
            os: "freebsd".into(),
            env: "".into(),
            abi: "".into(),
        },
        "powerpc64-unknown-linux-gnu" => Target {
            full_arch: "powerpc64".into(),
            arch: "powerpc64".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "gnu".into(),
            abi: "".into(),
        },
        "powerpc64-unknown-linux-musl" => Target {
            full_arch: "powerpc64".into(),
            arch: "powerpc64".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "musl".into(),
            abi: "".into(),
        },
        "powerpc64-unknown-openbsd" => Target {
            full_arch: "powerpc64".into(),
            arch: "powerpc64".into(),
            vendor: "unknown".into(),
            os: "openbsd".into(),
            env: "".into(),
            abi: "".into(),
        },
        "powerpc64-wrs-vxworks" => Target {
            full_arch: "powerpc64".into(),
            arch: "powerpc64".into(),
            vendor: "wrs".into(),
            os: "vxworks".into(),
            env: "gnu".into(),
            abi: "".into(),
        },
        "powerpc64le-unknown-freebsd" => Target {
            full_arch: "powerpc64le".into(),
            arch: "powerpc64".into(),
            vendor: "unknown".into(),
            os: "freebsd".into(),
            env: "".into(),
            abi: "".into(),
        },
        "powerpc64le-unknown-linux-gnu" => Target {
            full_arch: "powerpc64le".into(),
            arch: "powerpc64".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "gnu".into(),
            abi: "".into(),
        },
        "powerpc64le-unknown-linux-musl" => Target {
            full_arch: "powerpc64le".into(),
            arch: "powerpc64".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "musl".into(),
            abi: "".into(),
        },
        "riscv32-wrs-vxworks" => Target {
            full_arch: "riscv32".into(),
            arch: "riscv32".into(),
            vendor: "wrs".into(),
            os: "vxworks".into(),
            env: "gnu".into(),
            abi: "".into(),
        },
        "riscv32e-unknown-none-elf" => Target {
            full_arch: "riscv32e".into(),
            arch: "riscv32".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "".into(),
            abi: "".into(),
        },
        "riscv32em-unknown-none-elf" => Target {
            full_arch: "riscv32em".into(),
            arch: "riscv32".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "".into(),
            abi: "".into(),
        },
        "riscv32emc-unknown-none-elf" => Target {
            full_arch: "riscv32emc".into(),
            arch: "riscv32".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "".into(),
            abi: "".into(),
        },
        "riscv32gc-unknown-linux-gnu" => Target {
            full_arch: "riscv32gc".into(),
            arch: "riscv32".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "gnu".into(),
            abi: "".into(),
        },
        "riscv32gc-unknown-linux-musl" => Target {
            full_arch: "riscv32gc".into(),
            arch: "riscv32".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "musl".into(),
            abi: "".into(),
        },
        "riscv32i-unknown-none-elf" => Target {
            full_arch: "riscv32i".into(),
            arch: "riscv32".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "".into(),
            abi: "".into(),
        },
        "riscv32im-risc0-zkvm-elf" => Target {
            full_arch: "riscv32im".into(),
            arch: "riscv32".into(),
            vendor: "risc0".into(),
            os: "zkvm".into(),
            env: "".into(),
            abi: "".into(),
        },
        "riscv32im-unknown-none-elf" => Target {
            full_arch: "riscv32im".into(),
            arch: "riscv32".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "".into(),
            abi: "".into(),
        },
        "riscv32ima-unknown-none-elf" => Target {
            full_arch: "riscv32ima".into(),
            arch: "riscv32".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "".into(),
            abi: "".into(),
        },
        "riscv32imac-esp-espidf" => Target {
            full_arch: "riscv32imac".into(),
            arch: "riscv32".into(),
            vendor: "espressif".into(),
            os: "espidf".into(),
            env: "newlib".into(),
            abi: "".into(),
        },
        "riscv32imac-unknown-none-elf" => Target {
            full_arch: "riscv32imac".into(),
            arch: "riscv32".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "".into(),
            abi: "".into(),
        },
        "riscv32imac-unknown-nuttx-elf" => Target {
            full_arch: "riscv32imac".into(),
            arch: "riscv32".into(),
            vendor: "unknown".into(),
            os: "nuttx".into(),
            env: "".into(),
            abi: "".into(),
        },
        "riscv32imac-unknown-xous-elf" => Target {
            full_arch: "riscv32imac".into(),
            arch: "riscv32".into(),
            vendor: "unknown".into(),
            os: "xous".into(),
            env: "".into(),
            abi: "".into(),
        },
        "riscv32imafc-esp-espidf" => Target {
            full_arch: "riscv32imafc".into(),
            arch: "riscv32".into(),
            vendor: "espressif".into(),
            os: "espidf".into(),
            env: "newlib".into(),
            abi: "".into(),
        },
        "riscv32imafc-unknown-none-elf" => Target {
            full_arch: "riscv32imafc".into(),
            arch: "riscv32".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "".into(),
            abi: "".into(),
        },
        "riscv32imafc-unknown-nuttx-elf" => Target {
            full_arch: "riscv32imafc".into(),
            arch: "riscv32".into(),
            vendor: "unknown".into(),
            os: "nuttx".into(),
            env: "".into(),
            abi: "".into(),
        },
        "riscv32imc-esp-espidf" => Target {
            full_arch: "riscv32imc".into(),
            arch: "riscv32".into(),
            vendor: "espressif".into(),
            os: "espidf".into(),
            env: "newlib".into(),
            abi: "".into(),
        },
        "riscv32imc-unknown-none-elf" => Target {
            full_arch: "riscv32imc".into(),
            arch: "riscv32".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "".into(),
            abi: "".into(),
        },
        "riscv32imc-unknown-nuttx-elf" => Target {
            full_arch: "riscv32imc".into(),
            arch: "riscv32".into(),
            vendor: "unknown".into(),
            os: "nuttx".into(),
            env: "".into(),
            abi: "".into(),
        },
        "riscv64-linux-android" => Target {
            full_arch: "riscv64".into(),
            arch: "riscv64".into(),
            vendor: "unknown".into(),
            os: "android".into(),
            env: "".into(),
            abi: "".into(),
        },
        "riscv64-wrs-vxworks" => Target {
            full_arch: "riscv64".into(),
            arch: "riscv64".into(),
            vendor: "wrs".into(),
            os: "vxworks".into(),
            env: "gnu".into(),
            abi: "".into(),
        },
        "riscv64gc-unknown-freebsd" => Target {
            full_arch: "riscv64gc".into(),
            arch: "riscv64".into(),
            vendor: "unknown".into(),
            os: "freebsd".into(),
            env: "".into(),
            abi: "".into(),
        },
        "riscv64gc-unknown-fuchsia" => Target {
            full_arch: "riscv64gc".into(),
            arch: "riscv64".into(),
            vendor: "unknown".into(),
            os: "fuchsia".into(),
            env: "".into(),
            abi: "".into(),
        },
        "riscv64gc-unknown-hermit" => Target {
            full_arch: "riscv64gc".into(),
            arch: "riscv64".into(),
            vendor: "unknown".into(),
            os: "hermit".into(),
            env: "".into(),
            abi: "".into(),
        },
        "riscv64gc-unknown-linux-gnu" => Target {
            full_arch: "riscv64gc".into(),
            arch: "riscv64".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "gnu".into(),
            abi: "".into(),
        },
        "riscv64gc-unknown-linux-musl" => Target {
            full_arch: "riscv64gc".into(),
            arch: "riscv64".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "musl".into(),
            abi: "".into(),
        },
        "riscv64gc-unknown-netbsd" => Target {
            full_arch: "riscv64gc".into(),
            arch: "riscv64".into(),
            vendor: "unknown".into(),
            os: "netbsd".into(),
            env: "".into(),
            abi: "".into(),
        },
        "riscv64gc-unknown-none-elf" => Target {
            full_arch: "riscv64gc".into(),
            arch: "riscv64".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "".into(),
            abi: "".into(),
        },
        "riscv64gc-unknown-nuttx-elf" => Target {
            full_arch: "riscv64gc".into(),
            arch: "riscv64".into(),
            vendor: "unknown".into(),
            os: "nuttx".into(),
            env: "".into(),
            abi: "".into(),
        },
        "riscv64gc-unknown-openbsd" => Target {
            full_arch: "riscv64gc".into(),
            arch: "riscv64".into(),
            vendor: "unknown".into(),
            os: "openbsd".into(),
            env: "".into(),
            abi: "".into(),
        },
        "riscv64imac-unknown-none-elf" => Target {
            full_arch: "riscv64imac".into(),
            arch: "riscv64".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "".into(),
            abi: "".into(),
        },
        "riscv64imac-unknown-nuttx-elf" => Target {
            full_arch: "riscv64imac".into(),
            arch: "riscv64".into(),
            vendor: "unknown".into(),
            os: "nuttx".into(),
            env: "".into(),
            abi: "".into(),
        },
        "s390x-unknown-linux-gnu" => Target {
            full_arch: "s390x".into(),
            arch: "s390x".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "gnu".into(),
            abi: "".into(),
        },
        "s390x-unknown-linux-musl" => Target {
            full_arch: "s390x".into(),
            arch: "s390x".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "musl".into(),
            abi: "".into(),
        },
        "sparc-unknown-linux-gnu" => Target {
            full_arch: "sparc".into(),
            arch: "sparc".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "gnu".into(),
            abi: "".into(),
        },
        "sparc-unknown-none-elf" => Target {
            full_arch: "sparc".into(),
            arch: "sparc".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "".into(),
            abi: "".into(),
        },
        "sparc64-unknown-linux-gnu" => Target {
            full_arch: "sparc64".into(),
            arch: "sparc64".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "gnu".into(),
            abi: "".into(),
        },
        "sparc64-unknown-netbsd" => Target {
            full_arch: "sparc64".into(),
            arch: "sparc64".into(),
            vendor: "unknown".into(),
            os: "netbsd".into(),
            env: "".into(),
            abi: "".into(),
        },
        "sparc64-unknown-openbsd" => Target {
            full_arch: "sparc64".into(),
            arch: "sparc64".into(),
            vendor: "unknown".into(),
            os: "openbsd".into(),
            env: "".into(),
            abi: "".into(),
        },
        "sparcv9-sun-solaris" => Target {
            full_arch: "sparcv9".into(),
            arch: "sparc64".into(),
            vendor: "sun".into(),
            os: "solaris".into(),
            env: "".into(),
            abi: "".into(),
        },
        "thumbv4t-none-eabi" => Target {
            full_arch: "thumbv4t".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "".into(),
            abi: "eabi".into(),
        },
        "thumbv5te-none-eabi" => Target {
            full_arch: "thumbv5te".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "".into(),
            abi: "eabi".into(),
        },
        "thumbv6m-none-eabi" => Target {
            full_arch: "thumbv6m".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "".into(),
            abi: "eabi".into(),
        },
        "thumbv6m-nuttx-eabi" => Target {
            full_arch: "thumbv6m".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "nuttx".into(),
            env: "".into(),
            abi: "eabi".into(),
        },
        "thumbv7a-pc-windows-msvc" => Target {
            full_arch: "thumbv7a".into(),
            arch: "arm".into(),
            vendor: "pc".into(),
            os: "windows".into(),
            env: "msvc".into(),
            abi: "".into(),
        },
        "thumbv7a-uwp-windows-msvc" => Target {
            full_arch: "thumbv7a".into(),
            arch: "arm".into(),
            vendor: "uwp".into(),
            os: "windows".into(),
            env: "msvc".into(),
            abi: "uwp".into(),
        },
        "thumbv7em-none-eabi" => Target {
            full_arch: "thumbv7em".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "".into(),
            abi: "eabi".into(),
        },
        "thumbv7em-none-eabihf" => Target {
            full_arch: "thumbv7em".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "".into(),
            abi: "eabihf".into(),
        },
        "thumbv7em-nuttx-eabi" => Target {
            full_arch: "thumbv7em".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "nuttx".into(),
            env: "".into(),
            abi: "eabi".into(),
        },
        "thumbv7em-nuttx-eabihf" => Target {
            full_arch: "thumbv7em".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "nuttx".into(),
            env: "".into(),
            abi: "eabihf".into(),
        },
        "thumbv7m-none-eabi" => Target {
            full_arch: "thumbv7m".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "".into(),
            abi: "eabi".into(),
        },
        "thumbv7m-nuttx-eabi" => Target {
            full_arch: "thumbv7m".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "nuttx".into(),
            env: "".into(),
            abi: "eabi".into(),
        },
        "thumbv7neon-linux-androideabi" => Target {
            full_arch: "thumbv7neon".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "android".into(),
            env: "".into(),
            abi: "eabi".into(),
        },
        "thumbv7neon-unknown-linux-gnueabihf" => Target {
            full_arch: "thumbv7neon".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "gnu".into(),
            abi: "eabihf".into(),
        },
        "thumbv7neon-unknown-linux-musleabihf" => Target {
            full_arch: "thumbv7neon".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "musl".into(),
            abi: "eabihf".into(),
        },
        "thumbv8m.base-none-eabi" => Target {
            full_arch: "thumbv8m.base".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "".into(),
            abi: "eabi".into(),
        },
        "thumbv8m.base-nuttx-eabi" => Target {
            full_arch: "thumbv8m.base".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "nuttx".into(),
            env: "".into(),
            abi: "eabi".into(),
        },
        "thumbv8m.main-none-eabi" => Target {
            full_arch: "thumbv8m.main".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "".into(),
            abi: "eabi".into(),
        },
        "thumbv8m.main-none-eabihf" => Target {
            full_arch: "thumbv8m.main".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "".into(),
            abi: "eabihf".into(),
        },
        "thumbv8m.main-nuttx-eabi" => Target {
            full_arch: "thumbv8m.main".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "nuttx".into(),
            env: "".into(),
            abi: "eabi".into(),
        },
        "thumbv8m.main-nuttx-eabihf" => Target {
            full_arch: "thumbv8m.main".into(),
            arch: "arm".into(),
            vendor: "unknown".into(),
            os: "nuttx".into(),
            env: "".into(),
            abi: "eabihf".into(),
        },
        "wasm32-unknown-emscripten" => Target {
            full_arch: "wasm32".into(),
            arch: "wasm32".into(),
            vendor: "unknown".into(),
            os: "emscripten".into(),
            env: "".into(),
            abi: "".into(),
        },
        "wasm32-unknown-unknown" => Target {
            full_arch: "wasm32".into(),
            arch: "wasm32".into(),
            vendor: "unknown".into(),
            os: "unknown".into(),
            env: "".into(),
            abi: "".into(),
        },
        "wasm32-wasi" => Target {
            full_arch: "wasm32".into(),
            arch: "wasm32".into(),
            vendor: "unknown".into(),
            os: "wasi".into(),
            env: "p1".into(),
            abi: "".into(),
        },
        "wasm32-wasip1" => Target {
            full_arch: "wasm32".into(),
            arch: "wasm32".into(),
            vendor: "unknown".into(),
            os: "wasi".into(),
            env: "p1".into(),
            abi: "".into(),
        },
        "wasm32-wasip1-threads" => Target {
            full_arch: "wasm32".into(),
            arch: "wasm32".into(),
            vendor: "unknown".into(),
            os: "wasi".into(),
            env: "p1".into(),
            abi: "".into(),
        },
        "wasm32-wasip2" => Target {
            full_arch: "wasm32".into(),
            arch: "wasm32".into(),
            vendor: "unknown".into(),
            os: "wasi".into(),
            env: "p2".into(),
            abi: "".into(),
        },
        "wasm32v1-none" => Target {
            full_arch: "wasm32v1".into(),
            arch: "wasm32".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "".into(),
            abi: "".into(),
        },
        "wasm64-unknown-unknown" => Target {
            full_arch: "wasm64".into(),
            arch: "wasm64".into(),
            vendor: "unknown".into(),
            os: "unknown".into(),
            env: "".into(),
            abi: "".into(),
        },
        "x86_64-apple-darwin" => Target {
            full_arch: "x86_64".into(),
            arch: "x86_64".into(),
            vendor: "apple".into(),
            os: "macos".into(),
            env: "".into(),
            abi: "".into(),
        },
        "x86_64-apple-ios" => Target {
            full_arch: "x86_64".into(),
            arch: "x86_64".into(),
            vendor: "apple".into(),
            os: "ios".into(),
            env: "".into(),
            abi: "sim".into(),
        },
        "x86_64-apple-ios-macabi" => Target {
            full_arch: "x86_64".into(),
            arch: "x86_64".into(),
            vendor: "apple".into(),
            os: "ios".into(),
            env: "".into(),
            abi: "macabi".into(),
        },
        "x86_64-apple-tvos" => Target {
            full_arch: "x86_64".into(),
            arch: "x86_64".into(),
            vendor: "apple".into(),
            os: "tvos".into(),
            env: "".into(),
            abi: "sim".into(),
        },
        "x86_64-apple-watchos-sim" => Target {
            full_arch: "x86_64".into(),
            arch: "x86_64".into(),
            vendor: "apple".into(),
            os: "watchos".into(),
            env: "".into(),
            abi: "sim".into(),
        },
        "x86_64-fortanix-unknown-sgx" => Target {
            full_arch: "x86_64".into(),
            arch: "x86_64".into(),
            vendor: "fortanix".into(),
            os: "unknown".into(),
            env: "sgx".into(),
            abi: "fortanix".into(),
        },
        "x86_64-fuchsia" => Target {
            full_arch: "x86_64".into(),
            arch: "x86_64".into(),
            vendor: "unknown".into(),
            os: "fuchsia".into(),
            env: "".into(),
            abi: "".into(),
        },
        "x86_64-linux-android" => Target {
            full_arch: "x86_64".into(),
            arch: "x86_64".into(),
            vendor: "unknown".into(),
            os: "android".into(),
            env: "".into(),
            abi: "".into(),
        },
        "x86_64-pc-nto-qnx710" => Target {
            full_arch: "x86_64".into(),
            arch: "x86_64".into(),
            vendor: "pc".into(),
            os: "nto".into(),
            env: "nto71".into(),
            abi: "".into(),
        },
        "x86_64-pc-solaris" => Target {
            full_arch: "x86_64".into(),
            arch: "x86_64".into(),
            vendor: "pc".into(),
            os: "solaris".into(),
            env: "".into(),
            abi: "".into(),
        },
        "x86_64-pc-windows-gnu" => Target {
            full_arch: "x86_64".into(),
            arch: "x86_64".into(),
            vendor: "pc".into(),
            os: "windows".into(),
            env: "gnu".into(),
            abi: "".into(),
        },
        "x86_64-pc-windows-gnullvm" => Target {
            full_arch: "x86_64".into(),
            arch: "x86_64".into(),
            vendor: "pc".into(),
            os: "windows".into(),
            env: "gnu".into(),
            abi: "llvm".into(),
        },
        "x86_64-pc-windows-msvc" => Target {
            full_arch: "x86_64".into(),
            arch: "x86_64".into(),
            vendor: "pc".into(),
            os: "windows".into(),
            env: "msvc".into(),
            abi: "".into(),
        },
        "x86_64-sun-solaris" => Target {
            full_arch: "x86_64".into(),
            arch: "x86_64".into(),
            vendor: "sun".into(),
            os: "solaris".into(),
            env: "".into(),
            abi: "".into(),
        },
        "x86_64-unikraft-linux-musl" => Target {
            full_arch: "x86_64".into(),
            arch: "x86_64".into(),
            vendor: "unikraft".into(),
            os: "linux".into(),
            env: "musl".into(),
            abi: "".into(),
        },
        "x86_64-unknown-dragonfly" => Target {
            full_arch: "x86_64".into(),
            arch: "x86_64".into(),
            vendor: "unknown".into(),
            os: "dragonfly".into(),
            env: "".into(),
            abi: "".into(),
        },
        "x86_64-unknown-freebsd" => Target {
            full_arch: "x86_64".into(),
            arch: "x86_64".into(),
            vendor: "unknown".into(),
            os: "freebsd".into(),
            env: "".into(),
            abi: "".into(),
        },
        "x86_64-unknown-fuchsia" => Target {
            full_arch: "x86_64".into(),
            arch: "x86_64".into(),
            vendor: "unknown".into(),
            os: "fuchsia".into(),
            env: "".into(),
            abi: "".into(),
        },
        "x86_64-unknown-haiku" => Target {
            full_arch: "x86_64".into(),
            arch: "x86_64".into(),
            vendor: "unknown".into(),
            os: "haiku".into(),
            env: "".into(),
            abi: "".into(),
        },
        "x86_64-unknown-hermit" => Target {
            full_arch: "x86_64".into(),
            arch: "x86_64".into(),
            vendor: "unknown".into(),
            os: "hermit".into(),
            env: "".into(),
            abi: "".into(),
        },
        "x86_64-unknown-hurd-gnu" => Target {
            full_arch: "x86_64".into(),
            arch: "x86_64".into(),
            vendor: "unknown".into(),
            os: "hurd".into(),
            env: "gnu".into(),
            abi: "".into(),
        },
        "x86_64-unknown-illumos" => Target {
            full_arch: "x86_64".into(),
            arch: "x86_64".into(),
            vendor: "unknown".into(),
            os: "illumos".into(),
            env: "".into(),
            abi: "".into(),
        },
        "x86_64-unknown-l4re-uclibc" => Target {
            full_arch: "x86_64".into(),
            arch: "x86_64".into(),
            vendor: "unknown".into(),
            os: "l4re".into(),
            env: "uclibc".into(),
            abi: "".into(),
        },
        "x86_64-unknown-linux-gnu" => Target {
            full_arch: "x86_64".into(),
            arch: "x86_64".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "gnu".into(),
            abi: "".into(),
        },
        "x86_64-unknown-linux-gnux32" => Target {
            full_arch: "x86_64".into(),
            arch: "x86_64".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "gnu".into(),
            abi: "x32".into(),
        },
        "x86_64-unknown-linux-musl" => Target {
            full_arch: "x86_64".into(),
            arch: "x86_64".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "musl".into(),
            abi: "".into(),
        },
        "x86_64-unknown-linux-none" => Target {
            full_arch: "x86_64".into(),
            arch: "x86_64".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "".into(),
            abi: "".into(),
        },
        "x86_64-unknown-linux-ohos" => Target {
            full_arch: "x86_64".into(),
            arch: "x86_64".into(),
            vendor: "unknown".into(),
            os: "linux".into(),
            env: "ohos".into(),
            abi: "".into(),
        },
        "x86_64-unknown-netbsd" => Target {
            full_arch: "x86_64".into(),
            arch: "x86_64".into(),
            vendor: "unknown".into(),
            os: "netbsd".into(),
            env: "".into(),
            abi: "".into(),
        },
        "x86_64-unknown-none" => Target {
            full_arch: "x86_64".into(),
            arch: "x86_64".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "".into(),
            abi: "".into(),
        },
        "x86_64-unknown-none-linuxkernel" => Target {
            full_arch: "x86_64".into(),
            arch: "x86_64".into(),
            vendor: "unknown".into(),
            os: "none".into(),
            env: "gnu".into(),
            abi: "".into(),
        },
        "x86_64-unknown-openbsd" => Target {
            full_arch: "x86_64".into(),
            arch: "x86_64".into(),
            vendor: "unknown".into(),
            os: "openbsd".into(),
            env: "".into(),
            abi: "".into(),
        },
        "x86_64-unknown-redox" => Target {
            full_arch: "x86_64".into(),
            arch: "x86_64".into(),
            vendor: "unknown".into(),
            os: "redox".into(),
            env: "relibc".into(),
            abi: "".into(),
        },
        "x86_64-unknown-trusty" => Target {
            full_arch: "x86_64".into(),
            arch: "x86_64".into(),
            vendor: "unknown".into(),
            os: "trusty".into(),
            env: "".into(),
            abi: "".into(),
        },
        "x86_64-unknown-uefi" => Target {
            full_arch: "x86_64".into(),
            arch: "x86_64".into(),
            vendor: "unknown".into(),
            os: "uefi".into(),
            env: "".into(),
            abi: "".into(),
        },
        "x86_64-uwp-windows-gnu" => Target {
            full_arch: "x86_64".into(),
            arch: "x86_64".into(),
            vendor: "uwp".into(),
            os: "windows".into(),
            env: "gnu".into(),
            abi: "uwp".into(),
        },
        "x86_64-uwp-windows-msvc" => Target {
            full_arch: "x86_64".into(),
            arch: "x86_64".into(),
            vendor: "uwp".into(),
            os: "windows".into(),
            env: "msvc".into(),
            abi: "uwp".into(),
        },
        "x86_64-win7-windows-msvc" => Target {
            full_arch: "x86_64".into(),
            arch: "x86_64".into(),
            vendor: "win7".into(),
            os: "windows".into(),
            env: "msvc".into(),
            abi: "".into(),
        },
        "x86_64-wrs-vxworks" => Target {
            full_arch: "x86_64".into(),
            arch: "x86_64".into(),
            vendor: "wrs".into(),
            os: "vxworks".into(),
            env: "gnu".into(),
            abi: "".into(),
        },
        "x86_64h-apple-darwin" => Target {
            full_arch: "x86_64h".into(),
            arch: "x86_64".into(),
            vendor: "apple".into(),
            os: "macos".into(),
            env: "".into(),
            abi: "".into(),
        },
        "xtensa-esp32-espidf" => Target {
            full_arch: "xtensa".into(),
            arch: "xtensa".into(),
            vendor: "espressif".into(),
            os: "espidf".into(),
            env: "newlib".into(),
            abi: "".into(),
        },
        "xtensa-esp32-none-elf" => Target {
            full_arch: "xtensa".into(),
            arch: "xtensa".into(),
            vendor: "espressif".into(),
            os: "none".into(),
            env: "".into(),
            abi: "".into(),
        },
        "xtensa-esp32s2-espidf" => Target {
            full_arch: "xtensa".into(),
            arch: "xtensa".into(),
            vendor: "espressif".into(),
            os: "espidf".into(),
            env: "newlib".into(),
            abi: "".into(),
        },
        "xtensa-esp32s2-none-elf" => Target {
            full_arch: "xtensa".into(),
            arch: "xtensa".into(),
            vendor: "espressif".into(),
            os: "none".into(),
            env: "".into(),
            abi: "".into(),
        },
        "xtensa-esp32s3-espidf" => Target {
            full_arch: "xtensa".into(),
            arch: "xtensa".into(),
            vendor: "espressif".into(),
            os: "espidf".into(),
            env: "newlib".into(),
            abi: "".into(),
        },
        "xtensa-esp32s3-none-elf" => Target {
            full_arch: "xtensa".into(),
            arch: "xtensa".into(),
            vendor: "espressif".into(),
            os: "none".into(),
            env: "".into(),
            abi: "".into(),
        },
        _ => return None,
    })
}
