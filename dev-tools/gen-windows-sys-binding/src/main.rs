//! Adapted from
//! https://github.com/rust-lang/rust/blob/master/src/tools/generate-windows-sys/src/main.rs

use std::{
    fs,
    io::{self, Write},
};

/// This is printed to the file before the rest of the contents.
const PRELUDE: &str = r#"// This file is autogenerated.
//
// To add bindings, edit windows_sys.lst then run:
//
// ```
// cd generate-windows-sys/
// cargo run
// ```
"#;

const POSTLUDE: &str = r#"
/// Adapted from
/// [`core::ptr::invalid_mut()`](https://doc.rust-lang.org/src/core/ptr/mod.rs.html#600-607).
///
/// This function should actually use `core::mem::transmute` but due to msrv
/// we use `as` casting instead.
///
/// Once msrv is bumped to 1.56, replace this with `core::mem::transmute` since
/// it is const stablised in 1.56
///
/// NOTE that once supports `strict_provenance` we would also have to update
/// this.
const fn invalid_mut<T>(addr: usize) -> *mut T {
    addr as *mut T
}
"#;

fn main() -> io::Result<()> {
    // Load the list of APIs
    let buffer = fs::read_to_string("windows_sys.list")?;
    let names: Vec<&str> = buffer
        .lines()
        .filter_map(|line| {
            let line = line.trim();
            if line.is_empty() || line.starts_with("//") {
                None
            } else {
                Some(line)
            }
        })
        .collect();

    // Write the bindings to windows-sys.rs
    let bindings =
        windows_bindgen::standalone_std(&names).replace("::core::ptr::invalid_mut", "invalid_mut");

    let mut f = fs::File::create("../src/windows_sys.rs")?;
    f.write_all(PRELUDE.as_bytes())?;
    f.write_all(bindings.as_bytes())?;
    f.write_all(POSTLUDE.as_bytes())?;

    Ok(())
}
