//! Adapted from
//! https://github.com/rust-lang/rust/blob/master/src/tools/generate-windows-sys/src/main.rs

use std::{
    fs,
    io::{BufWriter, Write as _},
};

/// This is printed to the file before the rest of the contents.
const PRELUDE: &str = r#"// This file is autogenerated.
//
// To add bindings, edit windows_sys.lst then run:
//
// ```
// cd generate-windows-sys/
// cargo run
// ```"#;

fn main() {
    let manifest_dir = env!("CARGO_MANIFEST_DIR");
    let temp_file = tempfile::Builder::new()
        .suffix(".rs")
        .tempfile()
        .expect("failed to create temp file");

    // Common args to windows_bindgen.
    let mut args = vec![
        "--config",
        "flatten",
        "sys",
        "minimal",
        "--out",
        temp_file.path().to_str().unwrap(),
        "--filter",
    ];

    // Append the list of APIs
    let buffer = fs::read_to_string(format!("{manifest_dir}/windows_sys.list"))
        .expect("failed to read list");
    args.extend(buffer.lines().filter_map(|line| {
        let line = line.trim();
        if line.is_empty() || line.starts_with("//") {
            None
        } else {
            Some(line)
        }
    }));

    // Generate bindings.
    windows_bindgen::bindgen(&args).expect("running bindgen failed");

    let bindings =
        fs::read_to_string(temp_file.path()).expect("failed to read temp windows_sys.rs");

    let mut f = fs::File::create(format!("{manifest_dir}/../../src/windows/windows_sys.rs"))
        .map(BufWriter::new)
        .expect("failed to create windows_sys.rs");

    write!(&mut f, "{PRELUDE}\n{bindings}\n").unwrap();

    f.write_all(r#"use super::windows_targets;"#.as_bytes())
        .unwrap();
    f.write_all("\n".as_bytes()).unwrap();

    f.into_inner().unwrap().sync_all().unwrap();
}
