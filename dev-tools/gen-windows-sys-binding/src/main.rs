//! Adapted from
//! https://github.com/rust-lang/rust/blob/master/src/tools/generate-windows-sys/src/main.rs

use std::{
    fs,
    io::{BufWriter, Read as _, Write as _},
};

use regex::Regex;

/// This is printed to the file before the rest of the contents.
const PRELUDE: &str = r#"// This file is autogenerated.
//
// To add bindings, edit windows_sys.lst then run:
//
// ```
// cd generate-windows-sys/
// cargo run
// ```
"#;

fn main() {
    let manifest_dir = env!("CARGO_MANIFEST_DIR");
    let temp_file = tempfile::Builder::new()
        .suffix(".rs")
        .tempfile()
        .expect("failed to create temp file");

    // Common args to windows_bindgen.
    let mut args = vec![
        "--config",
        "flatten",
        "sys",
        "--out",
        temp_file.path().to_str().unwrap(),
        "--filter",
    ];

    // Append the list of APIs
    let buffer = fs::read_to_string(format!("{manifest_dir}/windows_sys.list"))
        .expect("failed to read list");
    args.extend(buffer.lines().filter_map(|line| {
        let line = line.trim();
        if line.is_empty() || line.starts_with("//") {
            None
        } else {
            Some(line)
        }
    }));

    // Generate bindings.
    windows_bindgen::bindgen(&args).expect("running bindgen failed");

    let mut bindings = String::new();
    fs::File::open(temp_file.path())
        .expect("failed to open temp windows_sys.rs")
        .read_to_string(&mut bindings)
        .expect("failed to read temp windows_sys.rs");

    let bindings = bindings.replace(
        "windows_targets::link!",
        "super::windows_targets::link_macro!",
    );

    let mut f = fs::File::create(format!("{manifest_dir}/../../src/windows/windows_sys.rs"))
        .map(BufWriter::new)
        .expect("failed to create windows_sys.rs");

    write!(&mut f, "{PRELUDE}\n{bindings}\n").unwrap();

    let mut dll_names: Vec<&str> = Regex::new(r#"link_macro!\("(.*)\.dll""#)
        .unwrap()
        .captures_iter(&bindings)
        .map(|caps| caps.extract().1)
        .map(|[dll_name]| dll_name)
        .filter(|dll_name| *dll_name != "kernel32")
        .collect();

    if !dll_names.is_empty() {
        dll_names.sort_unstable();
        dll_names.dedup();

        for dll_name in dll_names {
            write!(&mut f, r#"#[link(name = "{dll_name}")]"#).unwrap();
            f.write_all("\n".as_bytes()).unwrap();
        }

        f.write_all(r#"extern "C" {}"#.as_bytes()).unwrap();
        f.write_all("\n".as_bytes()).unwrap();
    }

    f.into_inner().unwrap().sync_all().unwrap();
}
